name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt

    - name: Basic quality checks
      run: |
        echo "üîç Running basic quality checks..."
        
        # Check Python syntax
        python -m py_compile test_quality.py
        echo "‚úÖ test_quality.py syntax OK"
        
        # Check JSON validity
        python -c "
        import json
        import os
        
        json_files = ['data/cases.json']
        for file in json_files:
            if os.path.exists(file):
                try:
                    with open(file, 'r', encoding='utf-8') as f:
                        json.load(f)
                    print(f'‚úÖ {file} valid')
                except Exception as e:
                    print(f'‚ùå {file} invalid: {e}')
                    exit(1)
            else:
                print(f'‚ö†Ô∏è {file} not found')
        "

    - name: Run simplified quality tests
      run: |
        python -c "
        print('üîç AFMTool1 - Simplified Quality Check')
        print('=' * 50)
        
        import os
        import json
        
        # Test 1: Check project structure
        required_files = ['main.py', 'data/cases.json', 'test_quality.py']
        missing_files = []
        
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print(f'‚ùå Missing files: {missing_files}')
            exit(1)
        else:
            print('‚úÖ All required files present')
        
        # Test 2: Validate JSON data
        try:
            with open('data/cases.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f'‚úÖ JSON data valid: {len(data)} entries')
        except Exception as e:
            print(f'‚ùå JSON validation failed: {e}')
            exit(1)
        
        # Test 3: Check Python syntax
        import ast
        python_files = ['main.py', 'test_quality.py']
        
        for py_file in python_files:
            if os.path.exists(py_file):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        ast.parse(f.read())
                    print(f'‚úÖ {py_file} syntax valid')
                except SyntaxError as e:
                    print(f'‚ùå {py_file} syntax error: {e}')
                    exit(1)
        
        print('\\nüìä Summary: All basic quality checks passed')
        "

    - name: Generate quality report
      run: |
        echo "üìù Generating quality report..."
        python -c "
        import json
        import datetime
        
        report = {
            'timestamp': datetime.datetime.now().isoformat(),
            'status': 'PASSED',
            'checks': {
                'syntax': 'OK',
                'json_validity': 'OK', 
                'file_structure': 'OK'
            }
        }
        
        with open('quality_report_github.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print('‚úÖ Quality report generated')
        "

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-report
        path: quality_report_github.json
